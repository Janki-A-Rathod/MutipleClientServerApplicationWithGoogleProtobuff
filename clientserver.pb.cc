// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clientserver.proto

#include "clientserver.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tutorial {
PROTOBUF_CONSTEXPR TxRxData::TxRxData(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , msg_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , last_updated_(nullptr)
  , id_(0){}
struct TxRxDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxRxDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxRxDataDefaultTypeInternal() {}
  union {
    TxRxData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxRxDataDefaultTypeInternal _TxRxData_default_instance_;
PROTOBUF_CONSTEXPR clientserver::clientserver(
    ::_pbi::ConstantInitialized)
  : totalclients_(){}
struct clientserverDefaultTypeInternal {
  PROTOBUF_CONSTEXPR clientserverDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~clientserverDefaultTypeInternal() {}
  union {
    clientserver _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 clientserverDefaultTypeInternal _clientserver_default_instance_;
}  // namespace tutorial
static ::_pb::Metadata file_level_metadata_clientserver_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_clientserver_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_clientserver_2eproto = nullptr;

const uint32_t TableStruct_clientserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::tutorial::TxRxData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::TxRxData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::TxRxData, id_),
  PROTOBUF_FIELD_OFFSET(::tutorial::TxRxData, name_),
  PROTOBUF_FIELD_OFFSET(::tutorial::TxRxData, msg_),
  PROTOBUF_FIELD_OFFSET(::tutorial::TxRxData, last_updated_),
  2,
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tutorial::clientserver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::clientserver, totalclients_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::tutorial::TxRxData)},
  { 14, -1, -1, sizeof(::tutorial::clientserver)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tutorial::_TxRxData_default_instance_._instance,
  &::tutorial::_clientserver_default_instance_._instance,
};

const char descriptor_table_protodef_clientserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022clientserver.proto\022\010tutorial\032\037google/p"
  "rotobuf/timestamp.proto\"\212\001\n\010TxRxData\022\017\n\002"
  "id\030\001 \001(\005H\000\210\001\001\022\021\n\004name\030\002 \001(\tH\001\210\001\001\022\020\n\003msg\030"
  "\003 \001(\tH\002\210\001\001\0220\n\014last_updated\030\004 \001(\0132\032.googl"
  "e.protobuf.TimestampB\005\n\003_idB\007\n\005_nameB\006\n\004"
  "_msg\"8\n\014clientserver\022(\n\014totalclients\030\001 \003"
  "(\0132\022.tutorial.TxRxDatab\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_clientserver_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_clientserver_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_clientserver_2eproto = {
    false, false, 270, descriptor_table_protodef_clientserver_2eproto,
    "clientserver.proto",
    &descriptor_table_clientserver_2eproto_once, descriptor_table_clientserver_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_clientserver_2eproto::offsets,
    file_level_metadata_clientserver_2eproto, file_level_enum_descriptors_clientserver_2eproto,
    file_level_service_descriptors_clientserver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_clientserver_2eproto_getter() {
  return &descriptor_table_clientserver_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_clientserver_2eproto(&descriptor_table_clientserver_2eproto);
namespace tutorial {

// ===================================================================

class TxRxData::_Internal {
 public:
  using HasBits = decltype(std::declval<TxRxData>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_updated(const TxRxData* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TxRxData::_Internal::last_updated(const TxRxData* msg) {
  return *msg->last_updated_;
}
void TxRxData::clear_last_updated() {
  if (GetArenaForAllocation() == nullptr && last_updated_ != nullptr) {
    delete last_updated_;
  }
  last_updated_ = nullptr;
}
TxRxData::TxRxData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:tutorial.TxRxData)
}
TxRxData::TxRxData(const TxRxData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    msg_.Set(from._internal_msg(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_last_updated()) {
    last_updated_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_updated_);
  } else {
    last_updated_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:tutorial.TxRxData)
}

inline void TxRxData::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
msg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&last_updated_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&last_updated_)) + sizeof(id_));
}

TxRxData::~TxRxData() {
  // @@protoc_insertion_point(destructor:tutorial.TxRxData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxRxData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  msg_.Destroy();
  if (this != internal_default_instance()) delete last_updated_;
}

void TxRxData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TxRxData::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.TxRxData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      msg_.ClearNonDefaultToEmpty();
    }
  }
  if (GetArenaForAllocation() == nullptr && last_updated_ != nullptr) {
    delete last_updated_;
  }
  last_updated_ = nullptr;
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxRxData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tutorial.TxRxData.name"));
        } else
          goto handle_unusual;
        continue;
      // optional string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tutorial.TxRxData.msg"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_updated = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_updated(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxRxData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.TxRxData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 id = 1;
  if (_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tutorial.TxRxData.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string msg = 3;
  if (_internal_has_msg()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tutorial.TxRxData.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  // .google.protobuf.Timestamp last_updated = 4;
  if (this->_internal_has_last_updated()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::last_updated(this),
        _Internal::last_updated(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.TxRxData)
  return target;
}

size_t TxRxData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.TxRxData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string msg = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_msg());
    }

  }
  // .google.protobuf.Timestamp last_updated = 4;
  if (this->_internal_has_last_updated()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_updated_);
  }

  // optional int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxRxData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TxRxData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxRxData::GetClassData() const { return &_class_data_; }

void TxRxData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TxRxData *>(to)->MergeFrom(
      static_cast<const TxRxData &>(from));
}


void TxRxData::MergeFrom(const TxRxData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.TxRxData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_msg(from._internal_msg());
    }
  }
  if (from._internal_has_last_updated()) {
    _internal_mutable_last_updated()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_updated());
  }
  if (cached_has_bits & 0x00000004u) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxRxData::CopyFrom(const TxRxData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.TxRxData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxRxData::IsInitialized() const {
  return true;
}

void TxRxData::InternalSwap(TxRxData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TxRxData, id_)
      + sizeof(TxRxData::id_)
      - PROTOBUF_FIELD_OFFSET(TxRxData, last_updated_)>(
          reinterpret_cast<char*>(&last_updated_),
          reinterpret_cast<char*>(&other->last_updated_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TxRxData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_clientserver_2eproto_getter, &descriptor_table_clientserver_2eproto_once,
      file_level_metadata_clientserver_2eproto[0]);
}

// ===================================================================

class clientserver::_Internal {
 public:
};

clientserver::clientserver(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  totalclients_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:tutorial.clientserver)
}
clientserver::clientserver(const clientserver& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      totalclients_(from.totalclients_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tutorial.clientserver)
}

inline void clientserver::SharedCtor() {
}

clientserver::~clientserver() {
  // @@protoc_insertion_point(destructor:tutorial.clientserver)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void clientserver::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void clientserver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void clientserver::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.clientserver)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  totalclients_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* clientserver::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tutorial.TxRxData totalclients = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_totalclients(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* clientserver::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.clientserver)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tutorial.TxRxData totalclients = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_totalclients_size()); i < n; i++) {
    const auto& repfield = this->_internal_totalclients(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.clientserver)
  return target;
}

size_t clientserver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.clientserver)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tutorial.TxRxData totalclients = 1;
  total_size += 1UL * this->_internal_totalclients_size();
  for (const auto& msg : this->totalclients_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData clientserver::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    clientserver::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*clientserver::GetClassData() const { return &_class_data_; }

void clientserver::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<clientserver *>(to)->MergeFrom(
      static_cast<const clientserver &>(from));
}


void clientserver::MergeFrom(const clientserver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.clientserver)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  totalclients_.MergeFrom(from.totalclients_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void clientserver::CopyFrom(const clientserver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.clientserver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool clientserver::IsInitialized() const {
  return true;
}

void clientserver::InternalSwap(clientserver* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  totalclients_.InternalSwap(&other->totalclients_);
}

::PROTOBUF_NAMESPACE_ID::Metadata clientserver::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_clientserver_2eproto_getter, &descriptor_table_clientserver_2eproto_once,
      file_level_metadata_clientserver_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tutorial
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tutorial::TxRxData*
Arena::CreateMaybeMessage< ::tutorial::TxRxData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::TxRxData >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::clientserver*
Arena::CreateMaybeMessage< ::tutorial::clientserver >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::clientserver >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
